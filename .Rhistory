n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
t_2 <- 200
testing_continued <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = 0)
sup_continued <- do.call(rbind, lapply(1:t_2, function(x){as.numeric(table(factor(testing_continued[[x]]$status_quo, levels = 1:moves)))}))
matplot(rbind(as.matrix(sup), as.matrix(sup_continued)), ylim = c(0, n), type = "l", xlim = c(t + t_2 - 300, t + t_2))
object <- testing[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*0.7
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
t_2 <- 200
testing_continued <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = 0)
sup_continued <- do.call(rbind, lapply(1:t_2, function(x){as.numeric(table(factor(testing_continued[[x]]$status_quo, levels = 1:moves)))}))
matplot(rbind(as.matrix(sup), as.matrix(sup_continued)), ylim = c(0, n), type = "l", xlim = c(t + t_2 - 300, t + t_2))
object <- testing[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*0.75
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
t_2 <- 200
testing_continued <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = 0)
sup_continued <- do.call(rbind, lapply(1:t_2, function(x){as.numeric(table(factor(testing_continued[[x]]$status_quo, levels = 1:moves)))}))
matplot(rbind(as.matrix(sup), as.matrix(sup_continued)), ylim = c(0, n), type = "l", xlim = c(t + t_2 - 300, t + t_2))
object <- testing[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*0.8
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
t_2 <- 200
testing_continued <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = 0)
sup_continued <- do.call(rbind, lapply(1:t_2, function(x){as.numeric(table(factor(testing_continued[[x]]$status_quo, levels = 1:moves)))}))
matplot(rbind(as.matrix(sup), as.matrix(sup_continued)), ylim = c(0, n), type = "l", xlim = c(t + t_2 - 300, t + t_2))
object <- testing[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*0.75
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
t_2 <- 200
testing_continued <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = 0)
sup_continued <- do.call(rbind, lapply(1:t_2, function(x){as.numeric(table(factor(testing_continued[[x]]$status_quo, levels = 1:moves)))}))
matplot(rbind(as.matrix(sup), as.matrix(sup_continued)), ylim = c(0, n), type = "l", xlim = c(t + t_2 - 300, t + t_2))
matplot(rbind(as.matrix(sup), as.matrix(sup_continued)), ylim = c(0, n), type = "l")
seq(0, 0.75, by = 0.15)
seq(0, 0.75, by = 0.15)
props <- seq(0, 0.9, by = 0.1)
props
props <- seq(0, 0.9, by = 0.05)
props
?parallel::mclapply
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 200
t <- 300
t_2 <- 200
cost <- 0.5
moves <- 4
gamma <- 0
props <- seq(0, 0.9, by = 0.05)
base <- model(pop_size = n, t = t, neg_cost = cost, n_moves = moves, gamma = gamma)
disruptions <- parallel::mclapply(1:length(props), function(x){
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
return(model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma))
}, mc.cores = 7)
props <- seq(0.05, 0.9, by = 0.05)
disruptions <- parallel::mclapply(1:length(props), function(x){
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
return(model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma))
}, mc.cores = 7)
disruptions
base[[t]]
base[[t]]$status_quo
factor(base[[t]]$status_quo, levels = c(1:4))
factor(base[[t]]$status_quo, levels = c(1:n_moves))
factor(base[[t]]$status_quo, levels = c(1:moves))
factor(base[[t]]$status_quo, levels = 1:moves)
table(factor(base[[t]]$status_quo, levels = 1:moves))
which.max(table(factor(base[[t]]$status_quo, levels = 1:moves)))
which.max(table(factor(base[[t]]$status_quo, levels = 1:moves)))
which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
status_quo <- which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
status_quo
base
base[[1]]
base[[1]]$status_quo
which(base[[1]]$status_quo == status_quo)
which(base[[1]]$status_quo == status_quo)
length(which(base[[1]]$status_quo == status_quo))
length(which(base[[1]]$status_quo == status_quo)/n)
length(which(base[[1]]$status_quo == status_quo))/n
length(which(base[[1]]$status_quo == status_quo))/n
length(which(base[[1]]$status_quo == status_quo))/n
base_freqs <- sapply(1:t, function(y){length(which(base[[y]]$status_quo == status_quo))/n})
base_freqs
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 200
t <- 300
t_2 <- 200
cost <- 0.5
moves <- 4
gamma <- 0
props <- seq(0.05, 0.9, by = 0.05)
base <- model(pop_size = n, t = t, neg_cost = cost, n_moves = moves, gamma = gamma)
status_quo <- which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
base_freqs <- sapply(1:t, function(y){length(which(base[[y]]$status_quo == status_quo))/n})
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
disrupt_freqs
rbind(disrupt_freqs)
do.call(rbind, disrupt_freqs)
t(do.call(rbind, disrupt_freqs))
matplot(t(do.call(rbind, disrupt_freqs)), type = "l")
matplot(do.call(rbind, disrupt_freqs), type = "l")
matplot(do.call(rbind, disrupt_freqs), type = "l")
matplot(t(do.call(rbind, disrupt_freqs)), type = "l")
matplot(t(do.call(rbind, disrupt_freqs)), type = "l")
disrupt_freqs[[1]]
c(base_freqs, disrupt_freqs[[1]])
c(base_freqs, disrupt_freqs[[1]])
mapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
boop <- sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
matplot(boop)
matplot(boop, type = "l")
matplot(boop, type = "l")
props <- seq(0.1, 0.9, by = 0.1)
props <- seq(0.1, 0.9, by = 0.1)
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
set.seed(123)
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
boop <- sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
matplot(boop, type = "l")
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
set.seed(1234)
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
boop <- sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
matplot(boop, type = "l")
props <- seq(0.15, 0.9, by = 0.15)
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
set.seed(1234)
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
boop <- sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
matplot(boop, type = "l")
matplot(boop, type = "l", xlim = c(100, 400))
matplot(boop, type = "l", xlim = c(200, 400))
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 500
t <- 500
t_2 <- 200
cost <- 0.5
moves <- 4
gamma <- 0
props <- seq(0.15, 0.9, by = 0.15)
base <- model(pop_size = n, t = t, neg_cost = cost, n_moves = moves, gamma = gamma)
status_quo <- which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
base_freqs <- sapply(1:t, function(y){length(which(base[[y]]$status_quo == status_quo))/n})
base_freqs
plot(base_freqs)
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
set.seed(1234)
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
boop <- sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
matplot(boop, type = "l")
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 1000
t <- 1000
t_2 <- 200
cost <- 0.5
moves <- 4
gamma <- 0
props <- seq(0.15, 0.9, by = 0.15)
base <- model(pop_size = n, t = t, neg_cost = cost, n_moves = moves, gamma = gamma)
status_quo <- which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
base_freqs <- sapply(1:t, function(y){length(which(base[[y]]$status_quo == status_quo))/n})
plot(base_freqs)
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
set.seed(1234)
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
boop <- sapply(1:length(props), function(x){
c(base_freqs, disrupt_freqs[[x]])
})
matplot(boop, type = "l")
matplot(boop, type = "l", xlim = c(900, 1100))
matplot(boop, type = "l", xlim = c(900, 1100), ylim = c(0, 1))
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 5000
t <- 1000
t_2 <- 200
cost <- 0.5
moves <- 4
gamma <- 0
props <- seq(0.15, 0.9, by = 0.15)
base <- model(pop_size = n, t = t, neg_cost = cost, n_moves = moves, gamma = gamma)
status_quo <- which.max(as.numeric(table(factor(base[[t]]$status_quo, levels = 1:moves))))
base_freqs <- sapply(1:t, function(y){length(which(base[[y]]$status_quo == status_quo))/n})
plot(base_freqs)
t_2 <- 100
disrupt_freqs <- parallel::mclapply(1:length(props), function(x){
set.seed(1234)
object <- base[[t]]
new_status_quo <- sample(c(1:moves)[-which.max(as.numeric(table(factor(object$status_quo, levels = 1:moves))))], 1)
pop_size <- n*props[x]
agents <- data.table::data.table(pref = NA,
status_quo = new_status_quo,
#status_quo = sample(moves, pop_size, replace = TRUE),
advertisement = 0,
negotiation = 0,
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves = moves, out_of = 1)}),
power = rnorm(pop_size, mean = 0, sd = 1),
outcome = NA,
a_status_quo = lapply(1:pop_size, function(x){c(0, rep(0, moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(0, 0)}),
n_status_quo = lapply(1:pop_size, function(x){rep(1, moves)}),
n_advertisement = lapply(1:pop_size, function(x){c(1, 1)}),
n_negotiation = lapply(1:pop_size, function(x){c(1, 1)}),
cum_status_quo = lapply(1:pop_size, function(x){rep(0, moves)}),
cum_advertisement = lapply(1:pop_size, function(x){c(0, 0)}),
cum_negotiation = lapply(1:pop_size, function(x){c(0, 0)}))
agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})
object <- rbind(object[1:(n-pop_size), ], agents)
output <- model(pop_size = n, t = t_2, neg_cost = cost, n_moves = moves, supply_agents = object, gamma = gamma)
return(sapply(1:t_2, function(y){length(which(output[[y]]$status_quo == status_quo))/n}))
}, mc.cores = 7)
base_freqs
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 1000
t <- 500
t_2 <- 100
cost <- 0.5
moves <- 4
gamma <- 0
props <- seq(0.15, 0.9, by = 0.15)
base <- model(pop_size = n, t = t, neg_cost = cost, n_moves = moves, gamma = gamma)
