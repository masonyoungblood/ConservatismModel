priors <- c(5, 0, 0, 0)
n_moves <- 4
init_move_probs <- c(1, 1, 1, 1)
pref_payoff <- FALSE
default_strat <- c(0, 0, 0)
m_diag <- 5
off_diag <- 0
sd <- 1
neg_cost <- 0.5
n <- 1
phi <- 0.5
delta <- 0
kappa <- 0
lambda <- 1
loss_averse <- TRUE
static_prefs <- FALSE
cores <- 7
#initialize population of agents with
agents <- data.table::data.table(pref = sample(n_moves, pop_size, replace = TRUE, prob = init_move_probs),
advertisement = default_strat[1], negotiation = default_strat[2], matching = default_strat[3],
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves, off_diag, m_diag, sd)}),
power = sapply(1:pop_size, function(x){rnorm(1, 5, 1)}),
a_moves = lapply(1:pop_size, function(x){c(priors[1], rep(0, n_moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(priors[2], 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(priors[3], 0)}),
a_matching = lapply(1:pop_size, function(x){c(priors[4], 0)}))
#if agents prefer their highest payoff move, then overwrite accordingly
if(pref_payoff){agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})}
#create output object
output <- list()
output[[1]] <- agents
i <- 2
#generate data frame of duos to coordinate (fully-connected population)
duos <- data.frame(x = sample(1:pop_size, pop_size/2), y = NA)
duos$y <- sample(c(1:pop_size)[-duos$x])
#iterate through duos in parallel with mclapply
coord_game_results <- parallel::mclapply(1:nrow(duos), function(j){
if(!static_prefs){
#calculate payoffs from different moves
move_payoffs_a <- sapply(1:n_moves, function(x){coord_game(as.numeric(agents[duos[j, 1], 2:4]), x, duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
move_payoffs_b <- sapply(1:n_moves, function(x){coord_game(as.numeric(agents[duos[j, 2], 2:4]), x, duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for moves
move_ewa_a <- ewa(a = agents$a_moves[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$pref[duos[j, 1]],
pi = move_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
move_ewa_b <- ewa(a = agents$a_moves[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$pref[duos[j, 2]],
pi = move_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
}
#calculate payoffs for advertisement
advertisement_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 1]], agents$matching[duos[j, 1]]),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
advertisement_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 2]], agents$matching[duos[j, 2]]),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for advertisement
advertisement_ewa_a <- ewa(a = agents$a_advertisement[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$advertisement[duos[j, 1]] + 1,
pi = advertisement_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
advertisement_ewa_b <- ewa(a = agents$a_advertisement[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$advertisement[duos[j, 2]] + 1,
pi = advertisement_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
#calculate payoffs for negotiation
negotiation_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 1]], x, agents$matching[duos[j, 1]]),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
negotiation_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 2]], x, agents$matching[duos[j, 2]]),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for negotiation
negotiation_ewa_a <- ewa(a = agents$a_negotiation[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$negotiation[duos[j, 1]] + 1,
pi = negotiation_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
negotiation_ewa_b <- ewa(a = agents$a_negotiation[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$negotiation[duos[j, 2]] + 1,
pi = negotiation_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
#calculate payoffs for matching
matching_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 1]], agents$negotiation[duos[j, 1]], x),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
matching_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 2]], agents$negotiation[duos[j, 2]], x),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for matching
matching_ewa_a <- ewa(a = agents$a_matching[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$matching[duos[j, 1]] + 1,
pi = matching_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
matching_ewa_b <- ewa(a = agents$a_matching[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$matching[duos[j, 2]] + 1,
pi = matching_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
#sample new preference and strategies for agent a
if(!static_prefs){
pref_strats_a <- c(sample(n_moves, 1, prob = move_ewa_a$probs), sample(c(0, 1), 1, prob = advertisement_ewa_a$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_a$probs), sample(c(0, 1), 1, prob = matching_ewa_a$probs))
} else{
pref_strats_a <- c(sample(c(0, 1), 1, prob = advertisement_ewa_a$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_a$probs), sample(c(0, 1), 1, prob = matching_ewa_a$probs))
}
#sample new preference and strategies for agent b
if(!static_prefs){
pref_strats_b <- c(sample(n_moves, 1, prob = move_ewa_b$probs), sample(c(0, 1), 1, prob = advertisement_ewa_b$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_b$probs), sample(c(0, 1), 1, prob = matching_ewa_b$probs))
} else{
pref_strats_b <- c(sample(c(0, 1), 1, prob = advertisement_ewa_b$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_b$probs), sample(c(0, 1), 1, prob = matching_ewa_b$probs))
}
#return objects
if(!static_prefs){
return(list(a = list(pref_strats = pref_strats_a,
move_a = move_ewa_a$a,
advertisement_a = advertisement_ewa_a$a,
negotiation_a = negotiation_ewa_a$a,
matching_a = matching_ewa_a$a),
b = list(pref_strats = pref_strats_b,
move_a = move_ewa_b$a,
advertisement_a = advertisement_ewa_b$a,
negotiation_a = negotiation_ewa_b$a,
matching_a = matching_ewa_b$a)))
} else{
return(list(a = list(pref_strats = pref_strats_a,
advertisement_a = advertisement_ewa_a$a,
negotiation_a = negotiation_ewa_a$a,
matching_a = matching_ewa_a$a),
b = list(pref_strats = pref_strats_b,
advertisement_a = advertisement_ewa_b$a,
negotiation_a = negotiation_ewa_b$a,
matching_a = matching_ewa_b$a)))
}
}, mc.cores = cores)
#generate data frame of duos to coordinate (fully-connected population)
duos <- data.frame(x = sample(1:pop_size, pop_size/2), y = NA)
duos$y <- sample(c(1:pop_size)[-duos$x])
#calculate payoffs for advertisement
advertisement_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 1]], agents$matching[duos[j, 1]]),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
j <- 1
#calculate payoffs for advertisement
advertisement_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 1]], agents$matching[duos[j, 1]]),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
advertisement_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 2]], agents$matching[duos[j, 2]]),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for advertisement
advertisement_ewa_a <- ewa(a = agents$a_advertisement[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$advertisement[duos[j, 1]] + 1,
pi = advertisement_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse)
model <- function(pop_size, t, status_quo = 1, priors = c(0, 0, 0, 0), n_moves = 4, init_move_probs = c(1, 1, 1, 1),
default_strat = c(0, 0, 0), m_diag = 5, off_diag = 0, sd = 1, neg_cost = 0.5,
n = 1, phi, delta = 0, kappa, lambda, pref_payoff = FALSE, loss_averse = FALSE, static_prefs = FALSE, cores = 7){
#initialize population of agents with
agents <- data.table::data.table(pref = sample(n_moves, pop_size, replace = TRUE, prob = init_move_probs),
advertisement = default_strat[1], negotiation = default_strat[2], matching = default_strat[3],
payoffs = lapply(1:pop_size, function(x){payoff_matrix_constructor(n_moves, off_diag, m_diag, sd)}),
power = sapply(1:pop_size, function(x){rnorm(1, 5, 1)}),
a_moves = lapply(1:pop_size, function(x){c(priors[1], rep(0, n_moves - 1))}),
a_advertisement = lapply(1:pop_size, function(x){c(priors[2], 0)}),
a_negotiation = lapply(1:pop_size, function(x){c(priors[3], 0)}),
a_matching = lapply(1:pop_size, function(x){c(priors[4], 0)}))
#if agents prefer their highest payoff move, then overwrite accordingly
if(pref_payoff){agents$pref <- sapply(1:pop_size, function(x){which.max(diag(agents$payoffs[[x]]))})}
#create output object
output <- list()
output[[1]] <- agents
for(i in 2:t){
#generate data frame of duos to coordinate (fully-connected population)
duos <- data.frame(x = sample(1:pop_size, pop_size/2), y = NA)
duos$y <- sample(c(1:pop_size)[-duos$x])
#iterate through duos in parallel with mclapply
coord_game_results <- parallel::mclapply(1:nrow(duos), function(j){
if(!static_prefs){
#calculate payoffs from different moves
move_payoffs_a <- sapply(1:n_moves, function(x){coord_game(as.numeric(agents[duos[j, 1], 2:4]), x, duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
move_payoffs_b <- sapply(1:n_moves, function(x){coord_game(as.numeric(agents[duos[j, 2], 2:4]), x, duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for moves
move_ewa_a <- ewa(a = agents$a_moves[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$pref[duos[j, 1]],
pi = move_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
move_ewa_b <- ewa(a = agents$a_moves[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$pref[duos[j, 2]],
pi = move_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
}
#calculate payoffs for advertisement
advertisement_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 1]], agents$matching[duos[j, 1]]),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
advertisement_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(x, agents$negotiation[duos[j, 2]], agents$matching[duos[j, 2]]),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for advertisement
advertisement_ewa_a <- ewa(a = agents$a_advertisement[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$advertisement[duos[j, 1]] + 1,
pi = advertisement_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
advertisement_ewa_b <- ewa(a = agents$a_advertisement[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$advertisement[duos[j, 2]] + 1,
pi = advertisement_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
#calculate payoffs for negotiation
negotiation_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 1]], x, agents$matching[duos[j, 1]]),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
negotiation_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 2]], x, agents$matching[duos[j, 2]]),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for negotiation
negotiation_ewa_a <- ewa(a = agents$a_negotiation[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$negotiation[duos[j, 1]] + 1,
pi = negotiation_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
negotiation_ewa_b <- ewa(a = agents$a_negotiation[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$negotiation[duos[j, 2]] + 1,
pi = negotiation_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
#calculate payoffs for matching
matching_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 1]], agents$negotiation[duos[j, 1]], x),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
matching_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 2]], agents$negotiation[duos[j, 2]], x),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for matching
matching_ewa_a <- ewa(a = agents$a_matching[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$matching[duos[j, 1]] + 1,
pi = matching_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
matching_ewa_b <- ewa(a = agents$a_matching[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$matching[duos[j, 2]] + 1,
pi = matching_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
#sample new preference and strategies for agent a
if(!static_prefs){
pref_strats_a <- c(sample(n_moves, 1, prob = move_ewa_a$probs), sample(c(0, 1), 1, prob = advertisement_ewa_a$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_a$probs), sample(c(0, 1), 1, prob = matching_ewa_a$probs))
} else{
pref_strats_a <- c(sample(c(0, 1), 1, prob = advertisement_ewa_a$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_a$probs), sample(c(0, 1), 1, prob = matching_ewa_a$probs))
}
#sample new preference and strategies for agent b
if(!static_prefs){
pref_strats_b <- c(sample(n_moves, 1, prob = move_ewa_b$probs), sample(c(0, 1), 1, prob = advertisement_ewa_b$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_b$probs), sample(c(0, 1), 1, prob = matching_ewa_b$probs))
} else{
pref_strats_b <- c(sample(c(0, 1), 1, prob = advertisement_ewa_b$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_b$probs), sample(c(0, 1), 1, prob = matching_ewa_b$probs))
}
#return objects
if(!static_prefs){
return(list(a = list(pref_strats = pref_strats_a,
move_a = move_ewa_a$a,
advertisement_a = advertisement_ewa_a$a,
negotiation_a = negotiation_ewa_a$a,
matching_a = matching_ewa_a$a),
b = list(pref_strats = pref_strats_b,
move_a = move_ewa_b$a,
advertisement_a = advertisement_ewa_b$a,
negotiation_a = negotiation_ewa_b$a,
matching_a = matching_ewa_b$a)))
} else{
return(list(a = list(pref_strats = pref_strats_a,
advertisement_a = advertisement_ewa_a$a,
negotiation_a = negotiation_ewa_a$a,
matching_a = matching_ewa_a$a),
b = list(pref_strats = pref_strats_b,
advertisement_a = advertisement_ewa_b$a,
negotiation_a = negotiation_ewa_b$a,
matching_a = matching_ewa_b$a)))
}
}, mc.cores = cores)
#get preferred strategies of everyone in column 1 of duos, and then everyone in column 2
pref_strats <- do.call(rbind, c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$pref_strats}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$pref_strats})))
#overwrite current preferences and strategies
if(!static_prefs){
agents$pref[c(duos$x, duos$y)] <- pref_strats[, 1]
agents$advertisement[c(duos$x, duos$y)] <- pref_strats[, 2]
agents$negotiation[c(duos$x, duos$y)] <- pref_strats[, 3]
agents$matching[c(duos$x, duos$y)] <- pref_strats[, 4]
} else{
agents$advertisement[c(duos$x, duos$y)] <- pref_strats[, 2]
agents$negotiation[c(duos$x, duos$y)] <- pref_strats[, 3]
agents$matching[c(duos$x, duos$y)] <- pref_strats[, 4]
}
#overwrite a values for preferences and strategies
if(!static_prefs){
agents$a_moves[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$move_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$move_a}))
}
agents$a_advertisement[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$advertisement_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$advertisement_a}))
agents$a_negotiation[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$negotiation_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$negotiation_a}))
agents$a_matching[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$matching_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$matching_a}))
#overwrite n
n <- observation(n, phi, kappa)
#remove objects
rm(list = c("duos", "coord_game_results", "pref_strats"))
#store output
output[[i]] <- agents
}
#return output
return(output)
}
#model plotting function, strategies or moves (strats = TRUE/FALSE)
plot_model <- function(output, colors = NULL, strats = TRUE, xlim = NULL){
if(strats){
#get all possible combinations of strategies
poss_patterns <- expand.grid(rep(list(c(0, 1)), 3))
poss_patterns <- sapply(1:nrow(poss_patterns), function(x){paste0(poss_patterns[x, ], collapse = "")})
#store pop_size and t from output
t <- ifelse(is.null(xlim), length(output), xlim)
pop_size <- nrow(output[[1]])
#convert output to matrix
output_mat <- sapply(1:t, function(x){as.numeric(table(factor(sapply(1:pop_size, function(y){paste0(output[[x]][y, 2:4], collapse = "")}), levels = poss_patterns)))})
#generate colors for plotting
if(is.null(colors)){colors <- c("black", distinctColorPalette(length(poss_patterns) - 1))}
#plot
par(mar = c(4, 4, 1, 1))
plot(1:t, output_mat[1,]/pop_size, ylim = c(0, 1), ylab = "Proportion", xlab = "Time", type = "l", col = colors[1], lwd = 2)
for(i in 2:nrow(output_mat)){lines(1:t, output_mat[i,]/pop_size, col = colors[i], lwd = 2)}
legend("topright", legend = poss_patterns, col = colors, pch = 19, ncol = 2)
} else{
#get number of moves
n_moves <- length(output[[1]]$a_moves[[1]])
#store pop_size and t from output
t <- ifelse(is.null(xlim), length(output), xlim)
pop_size <- nrow(output[[1]])
#convert output to matrix
output_mat <- sapply(1:t, function(x){as.numeric(table(factor(output[[x]]$pref, levels = 1:n_moves)))})
#generate colors for plotting
colors <- c("black", distinctColorPalette(n_moves - 1))
#plot
par(mar = c(4, 4, 1, 1))
plot(1:t, output_mat[1,]/pop_size, ylim = c(0, 1), ylab = "Proportion", xlab = "Time", type = "l", col = colors[1], lwd = 2)
for(i in 2:nrow(output_mat)){lines(1:t, output_mat[i,]/pop_size, col = colors[i], lwd = 2)}
legend("topright", legend = 1:n_moves, col = colors, pch = 19, ncol = 2)
}
}
low_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 0, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
#load libraries
library(parallel)
library(randomcoloR)
low_neg <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 0, delta = 0, kappa = 0, lambda = 1)
med_neg <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 2, delta = 0, kappa = 0, lambda = 1)
high_neg <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 4, delta = 0, kappa = 0, lambda = 1)
low_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 0, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
med_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 2, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
high_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 4, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
plot_model(high_neg_loss)
plot_model(med_neg_loss)
plot_model(low_neg_loss)
load("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/output/base_attr.RData")
attractive$status_quo[[1]]
plot(attractive$status_quo[[1]])
plot(attractive$status_quo[[100]])
plot(attractive$arbitrary[[100]])
mean(attractive$arbitrary[[100]])
mean(attractive$status_quo[[100]])
mean(attractive$status_quo[[101]])
mean(attractive$arbitrary[[101]])
load("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/output/base_final.RData")
final
final[[100]]$a_advertisement
final[[100]]$negotiation
final[[100]]$a_matching
final[[100]]$advertisement
setwd("~/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
model(pop_size = 5000, t = 100, priors = c(1, 0, 0, 0), neg_cost = neg_costs, n_moves = n_moves, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
model(pop_size = 5000, t = 100, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
model(pop_size = 1000, t = 100, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 1000, t = 100, priors = c(0.1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test
test[[50]]
test[[50]]$a_moves
sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]})
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]}))
lapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))})
sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))})
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test[[50]]$a_negotiation
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test
test[[50]]$a_matching
test[[50]]$a_negotiation
test[[50]]$a_advertisement
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE, networked = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test <- model(pop_size = 500, t = 50, priors = c(5, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE, networked = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE, networked = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test[[50]]$a_matching
test[[50]]$a_negotiation
test[[50]]$a_advertisement
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test[[50]]$a_moves
test[[50]]$a_advertisement
test[[50]]$a_negotiation
#test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
test[[50]]$a_moves
sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]})
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][2]}))
#test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(0.05, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][2]}))
#test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(0.01, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][2]}))
exp(0.0004)
exp(0.0004)/sum(exp(0.0004), exp(0))
exp(0.0004)/sum(exp(0.0004), exp(0))
exp(0.0004)/sum(exp(0.0002), exp(0))
exp(0.0004)/sum(exp(0.01), exp(0))
exp(0.0004)/sum(exp(0.1), exp(0))
exp(0.0004)/sum(exp(1), exp(0))
exp(1)/sum(exp(1), exp(0))
exp(0.5)/sum(exp(0.5), exp(0))
exp(0.1)/sum(exp(0.1), exp(0))
exp(0.5)/sum(exp(0.5), exp(0))
exp(0.5)/sum(exp(0.5), exp(0))
exp(0.7)/sum(exp(0.7), exp(0))
exp(0.6)/sum(exp(0.6), exp(0))
exp(0.61)/sum(exp(0.61), exp(0))
exp(0.65)/sum(exp(0.65), exp(0))
exp(0.63)/sum(exp(0.63), exp(0))
exp(0.62)/sum(exp(0.62), exp(0))
exp(0.8)/sum(exp(0.8), exp(0))
exp(0.9)/sum(exp(0.9), exp(0))
exp(0.88)/sum(exp(0.88), exp(0))
exp(0.87)/sum(exp(0.87), exp(0))
exp(0.86)/sum(exp(0.86), exp(0))
exp(0.85)/sum(exp(0.85), exp(0))
exp(0.84)/sum(exp(0.84), exp(0))
exp(0.85)/sum(exp(0.85), exp(0))
#test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(0.85, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][2]}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
exp(0.85)/sum(exp(0.85), rep(exp(0), 3))
exp(0.85)/sum(exp(0.85), rep(exp(0), 3))
exp(0.5)/sum(exp(0.5), rep(exp(0), 3))
(exp(0.5)/sum(exp(0.5), rep(exp(0), 3)))-(1/4)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 3)))-(1/4)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 3)))-(1/4)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 7)))-(1/8)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 7)))-(1/8)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 7)))-(1/8)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 1)))-(1/2)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 1)))-(1/2)
(exp(0.5)/sum(exp(0.5), rep(exp(0), 1)))-(1/2)
(exp(1)/sum(exp(1), rep(exp(0), 1)))-(1/2)
(exp(1)/sum(exp(1), rep(exp(0), 1)))-(1/2)
(exp(1)/sum(exp(1), rep(exp(0), 3)))-(1/4)
(exp(1)/sum(exp(1), rep(exp(0), 3)))-(1/4)
(exp(1)/sum(exp(1), rep(exp(0), 3)))-(1/4)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot(test)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 100, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
median(sapply(1:500, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][2]}))
test <- model(pop_size = 100, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 0.5, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][2]}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
(exp(5)/sum(exp(5), rep(exp(0), 7)))-(1/8)
(exp(1)/sum(exp(1), rep(exp(0), 7)))-(1/8)
(exp(1*0.5)/sum(exp(1*0.5), rep(exp(0), 7)))-(1/8)
(exp(1*0.5)/sum(exp(1*0.5), rep(exp(0), 7)))-(1/8)
(exp(1*0.5)/sum(exp(1*0.5), rep(exp(0), 7)))-(1/8)
(exp(1*0.5)/sum(exp(1*0.5), rep(exp(0), 7)))-(1/8)
(exp(1*0.5)/sum(exp(1*0.5), rep(exp(0), 7)))-(1/8)
(exp(1*1)/sum(exp(1*1), rep(exp(0), 7)))-(1/8)
setwd("~/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][2]}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][2]}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][1]}))}))
plot(sapply(1:50, function(y){median(sapply(1:500, function(x){test[[y]]$a_moves[[x]][2]}))}))
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 4, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 10, n_moves = 4, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 2, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, networked = TRUE)
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][1]}))
median(sapply(1:100, function(x){test[[50]]$a_moves[[x]][2]}))
plot_model(test)
