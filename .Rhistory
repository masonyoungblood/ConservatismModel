#solve ewa for negotiation
negotiation_ewa_a <- ewa(a = agents$a_negotiation[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$negotiation[duos[j, 1]] + 1,
pi = negotiation_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
negotiation_ewa_b <- ewa(a = agents$a_negotiation[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$negotiation[duos[j, 2]] + 1,
pi = negotiation_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
#calculate payoffs for matching
matching_payoffs_a <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 1]], agents$negotiation[duos[j, 1]], x),
agents$pref[duos[j, 1]], duos[j, 1], duos[j, 2], status_quo, neg_cost, agents)})
matching_payoffs_b <- sapply(c(0, 1), function(x){coord_game(c(agents$advertisement[duos[j, 2]], agents$negotiation[duos[j, 2]], x),
agents$pref[duos[j, 2]], duos[j, 2], duos[j, 1], status_quo, neg_cost, agents)})
#solve ewa for matching
matching_ewa_a <- ewa(a = agents$a_matching[[duos[j, 1]]], n = n, phi = phi, delta = delta, strat_used = agents$matching[duos[j, 1]] + 1,
pi = matching_payoffs_a, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
matching_ewa_b <- ewa(a = agents$a_matching[[duos[j, 2]]], n = n, phi = phi, delta = delta, strat_used = agents$matching[duos[j, 2]] + 1,
pi = matching_payoffs_b, kappa = kappa, lambda = lambda, loss_averse = loss_averse, m_diag = m_diag)
#sample new preference and strategies for agent a
if(!static_prefs){
pref_strats_a <- c(sample(n_moves, 1, prob = move_ewa_a$probs), sample(c(0, 1), 1, prob = advertisement_ewa_a$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_a$probs), sample(c(0, 1), 1, prob = matching_ewa_a$probs))
} else{
pref_strats_a <- c(sample(c(0, 1), 1, prob = advertisement_ewa_a$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_a$probs), sample(c(0, 1), 1, prob = matching_ewa_a$probs))
}
#sample new preference and strategies for agent b
if(!static_prefs){
pref_strats_b <- c(sample(n_moves, 1, prob = move_ewa_b$probs), sample(c(0, 1), 1, prob = advertisement_ewa_b$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_b$probs), sample(c(0, 1), 1, prob = matching_ewa_b$probs))
} else{
pref_strats_b <- c(sample(c(0, 1), 1, prob = advertisement_ewa_b$probs),
sample(c(0, 1), 1, prob = negotiation_ewa_b$probs), sample(c(0, 1), 1, prob = matching_ewa_b$probs))
}
#return objects
if(!static_prefs){
return(list(a = list(pref_strats = pref_strats_a,
move_a = move_ewa_a$a,
advertisement_a = advertisement_ewa_a$a,
negotiation_a = negotiation_ewa_a$a,
matching_a = matching_ewa_a$a),
b = list(pref_strats = pref_strats_b,
move_a = move_ewa_b$a,
advertisement_a = advertisement_ewa_b$a,
negotiation_a = negotiation_ewa_b$a,
matching_a = matching_ewa_b$a)))
} else{
return(list(a = list(pref_strats = pref_strats_a,
advertisement_a = advertisement_ewa_a$a,
negotiation_a = negotiation_ewa_a$a,
matching_a = matching_ewa_a$a),
b = list(pref_strats = pref_strats_b,
advertisement_a = advertisement_ewa_b$a,
negotiation_a = negotiation_ewa_b$a,
matching_a = matching_ewa_b$a)))
}
}, mc.cores = cores)
#get preferred strategies of everyone in column 1 of duos, and then everyone in column 2
pref_strats <- do.call(rbind, c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$pref_strats}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$pref_strats})))
#overwrite current preferences and strategies
if(!static_prefs){
agents$pref[c(duos$x, duos$y)] <- pref_strats[, 1]
agents$advertisement[c(duos$x, duos$y)] <- pref_strats[, 2]
agents$negotiation[c(duos$x, duos$y)] <- pref_strats[, 3]
agents$matching[c(duos$x, duos$y)] <- pref_strats[, 4]
} else{
agents$advertisement[c(duos$x, duos$y)] <- pref_strats[, 2]
agents$negotiation[c(duos$x, duos$y)] <- pref_strats[, 3]
agents$matching[c(duos$x, duos$y)] <- pref_strats[, 4]
}
#overwrite a values for preferences and strategies
if(!static_prefs){
agents$a_moves[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$move_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$move_a}))
}
agents$a_advertisement[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$advertisement_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$advertisement_a}))
agents$a_negotiation[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$negotiation_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$negotiation_a}))
agents$a_matching[c(duos$x, duos$y)] <- c(lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$a$matching_a}),
lapply(1:(pop_size/2), function(x){coord_game_results[[x]]$b$matching_a}))
#overwrite n
n <- observation(n, phi, kappa)
#remove objects
rm(list = c("duos", "coord_game_results", "pref_strats"))
#store output
output[[i]] <- agents
}
#return output
return(output)
}
#model plotting function, strategies or moves (strats = TRUE/FALSE)
plot_model <- function(output, colors = NULL, strats = TRUE, xlim = NULL){
if(strats){
#get all possible combinations of strategies
poss_patterns <- expand.grid(rep(list(c(0, 1)), 3))
poss_patterns <- sapply(1:nrow(poss_patterns), function(x){paste0(poss_patterns[x, ], collapse = "")})
#store pop_size and t from output
t <- ifelse(is.null(xlim), length(output), xlim)
pop_size <- nrow(output[[1]])
#convert output to matrix
output_mat <- sapply(1:t, function(x){as.numeric(table(factor(sapply(1:pop_size, function(y){paste0(output[[x]][y, 2:4], collapse = "")}), levels = poss_patterns)))})
#generate colors for plotting
if(is.null(colors)){colors <- c("black", distinctColorPalette(length(poss_patterns) - 1))}
#plot
par(mar = c(4, 4, 1, 1))
plot(1:t, output_mat[1,]/pop_size, ylim = c(0, 1), ylab = "Proportion", xlab = "Time", type = "l", col = colors[1], lwd = 2)
for(i in 2:nrow(output_mat)){lines(1:t, output_mat[i,]/pop_size, col = colors[i], lwd = 2)}
legend("topright", legend = poss_patterns, col = colors, pch = 19, ncol = 2)
} else{
#get number of moves
n_moves <- length(output[[1]]$a_moves[[1]])
#store pop_size and t from output
t <- ifelse(is.null(xlim), length(output), xlim)
pop_size <- nrow(output[[1]])
#convert output to matrix
output_mat <- sapply(1:t, function(x){as.numeric(table(factor(output[[x]]$pref, levels = 1:n_moves)))})
#generate colors for plotting
colors <- c("black", distinctColorPalette(n_moves - 1))
#plot
par(mar = c(4, 4, 1, 1))
plot(1:t, output_mat[1,]/pop_size, ylim = c(0, 1), ylab = "Proportion", xlab = "Time", type = "l", col = colors[1], lwd = 2)
for(i in 2:nrow(output_mat)){lines(1:t, output_mat[i,]/pop_size, col = colors[i], lwd = 2)}
legend("topright", legend = 1:n_moves, col = colors, pch = 19, ncol = 2)
}
}
low_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 0, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
#load libraries
library(parallel)
library(randomcoloR)
low_neg <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 0, delta = 0, kappa = 0, lambda = 1)
med_neg <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 2, delta = 0, kappa = 0, lambda = 1)
high_neg <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 4, delta = 0, kappa = 0, lambda = 1)
low_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 0, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
med_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 2, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
high_neg_loss <- model(500, 200, priors = c(5, 0, 0, 0), phi = 0.5, neg_cost = 4, delta = 0.2, kappa = 0, lambda = 1, loss_averse = TRUE)
plot_model(high_neg_loss)
plot_model(med_neg_loss)
plot_model(low_neg_loss)
install.packages("rmdformats")
install.packages("rmdformats")
install.packages('fidelius')
setwd("~/Documents/Work/Fall 2022/Conservatism")
#load libraries
library(parallel)
library(randomcoloR)
library(ggplot2)
library(cowplot)
library(compiler)
library(profvis)
#load simulations
load("hpcc_output/output/base_output.RData")
base_output <- params
load("hpcc_output/output/base_net_output.RData")
base_net_output <- params
load("hpcc_output/output/loss_output.RData")
loss_output <- params
load("hpcc_output/output/loss_net_output.RData")
loss_net_output <- params
rm(params)
for(i in 1:4){
if(i == 1){target_obj <- base_output}
if(i == 2){target_obj <- base_net_output}
if(i == 3){target_obj <- loss_output}
if(i == 4){target_obj <- loss_net_output}
#create plots for each strategy
conservative_plot <- ggplot(target_obj, aes(x = neg_costs, y = n_moves, fill = conservative)) + geom_tile() + xlab("Negotiation Costs") + ylab("Number of Moves") +
scale_fill_gradientn(name = "Prop", colours = c("blue", "white", "red"), values = scales::rescale(c(min(target_obj$conservative), median(target_obj$conservative), max(target_obj$conservative)))) +
ggtitle(bquote(bold("100: Conservative"))) + theme_linedraw(base_size = 8) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
advertisement_plot <- ggplot(target_obj, aes(x = neg_costs, y = n_moves, fill = advertisement)) + geom_tile() + xlab("Negotiation Costs") + ylab("Number of Moves") +
scale_fill_gradientn(name = "Prop", colours = c("blue", "white", "red"), values = scales::rescale(c(min(target_obj$advertisement), median(target_obj$advertisement), max(target_obj$advertisement)))) +
ggtitle(bquote(bold("1XX: Advertisement"))) + theme_linedraw(base_size = 8) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
negotiation_plot <- ggplot(target_obj, aes(x = neg_costs, y = n_moves, fill = negotiation)) + geom_tile() + xlab("Negotiation Costs") + ylab("Number of Moves") +
scale_fill_gradientn(name = "Prop", colours = c("blue", "white", "red"), values = scales::rescale(c(min(target_obj$negotiation), median(target_obj$negotiation), max(target_obj$negotiation)))) +
ggtitle(bquote(bold("X1X: Negotiation"))) + theme_linedraw(base_size = 8) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
matching_plot <- ggplot(target_obj, aes(x = neg_costs, y = n_moves, fill = matching)) + geom_tile() + xlab("Negotiation Costs") + ylab("Number of Moves") +
scale_fill_gradientn(name = "Prop", colours = c("blue", "white", "red"), values = scales::rescale(c(min(target_obj$matching), median(target_obj$matching), max(target_obj$matching)))) +
ggtitle(bquote(bold("XX1: Matching"))) + theme_linedraw(base_size = 8) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
#export cowplot
if(i == 1){png("model_plots/base_heatmaps.png", width = 6, height = 5, units = "in", res = 300)}
if(i == 2){png("model_plots/base_net_heatmaps.png", width = 6, height = 5, units = "in", res = 300)}
if(i == 3){png("model_plots/loss_heatmaps.png", width = 6, height = 5, units = "in", res = 300)}
if(i == 4){png("model_plots/loss_net_heatmaps.png", width = 6, height = 5, units = "in", res = 300)}
print({
plot_grid(conservative_plot, advertisement_plot,
negotiation_plot, matching_plot,
nrow = 2, ncol = 2)
})
dev.off()
}
setwd("~/Documents/Work/Fall 2022/Conservatism")
#load simulations
load("hpcc_output/output/base_final.RData")
base_final <- final
load("hpcc_output/output/base_net_final.RData")
base_net_final <- final
load("hpcc_output/output/loss_final.RData")
loss_final <- final
load("hpcc_output/output/loss_net_final.RData")
loss_net_final <- final
rm(final)
neg_costs <- seq(0, 10, 1)
n_moves <- seq(2, 12, 1)
params <- data.frame(neg_costs = rep(neg_costs, length(n_moves)),
n_moves = unlist(lapply(1:length(n_moves), function(x){rep(n_moves[x], length(neg_costs))})))
pop_size <- 500
b <- c()
p <- c()
object <- loss_final
for(i in 1:length(object)){
strat <- rep(0, pop_size)
strat[which(object[[i]]$advertisement == 1 & object[[i]]$negotiation == 0 & object[[i]]$matching == 0)] <- 1
#strat[which(object[[i]]$advertisement == 1)] <- 1
power <- object[[i]]$power
data <- data.frame(strat = as.factor(strat), power = power)
logit_model <- glm(strat ~ power, data = data, family = "binomial")
b <- c(b, as.numeric(logit_model$coefficients[2]))
p <- c(p, summary(logit_model)$coefficients[2, 4])
rm(list = c("strat", "power", "data", "logit_model"))
}
p
b
hist(p)
b <- c()
p <- c()
object <- base_final
for(i in 1:length(object)){
strat <- rep(0, pop_size)
strat[which(object[[i]]$advertisement == 1 & object[[i]]$negotiation == 0 & object[[i]]$matching == 0)] <- 1
#strat[which(object[[i]]$advertisement == 1)] <- 1
power <- object[[i]]$power
data <- data.frame(strat = as.factor(strat), power = power)
logit_model <- glm(strat ~ power, data = data, family = "binomial")
b <- c(b, as.numeric(logit_model$coefficients[2]))
p <- c(p, summary(logit_model)$coefficients[2, 4])
rm(list = c("strat", "power", "data", "logit_model"))
}
p
hist(p)
b <- c()
p <- c()
object <- base_net_final
for(i in 1:length(object)){
strat <- rep(0, pop_size)
strat[which(object[[i]]$advertisement == 1 & object[[i]]$negotiation == 0 & object[[i]]$matching == 0)] <- 1
#strat[which(object[[i]]$advertisement == 1)] <- 1
power <- object[[i]]$power
data <- data.frame(strat = as.factor(strat), power = power)
logit_model <- glm(strat ~ power, data = data, family = "binomial")
b <- c(b, as.numeric(logit_model$coefficients[2]))
p <- c(p, summary(logit_model)$coefficients[2, 4])
rm(list = c("strat", "power", "data", "logit_model"))
}
p
hist(p)
b[which(p < 0.05)]
params[which(p < 0.05), ]
b <- c()
p <- c()
object <- loss_net_final
for(i in 1:length(object)){
strat <- rep(0, pop_size)
strat[which(object[[i]]$advertisement == 1 & object[[i]]$negotiation == 0 & object[[i]]$matching == 0)] <- 1
#strat[which(object[[i]]$advertisement == 1)] <- 1
power <- object[[i]]$power
data <- data.frame(strat = as.factor(strat), power = power)
logit_model <- glm(strat ~ power, data = data, family = "binomial")
b <- c(b, as.numeric(logit_model$coefficients[2]))
p <- c(p, summary(logit_model)$coefficients[2, 4])
rm(list = c("strat", "power", "data", "logit_model"))
}
b[which(p < 0.05)]
params[which(p < 0.05), ]
library(ggplot2)
library(cowplot)
for(i in 1:4){
if(i == 1){target_obj <- base_final}
if(i == 2){target_obj <- base_net_final}
if(i == 3){target_obj <- loss_final}
if(i == 4){target_obj <- loss_net_final}
#of everyone with strategy 111, who ends up playing 100?
strat_111_plays_100 <- sapply(1:length(target_obj), function(x){
temp <- sort(table(unlist(target_obj[[x]]$actual_outcome[which(target_obj[[x]]$advertisement == 1 & target_obj[[x]]$negotiation == 1 & target_obj[[x]]$matching == 1)])), decreasing = TRUE)
return(as.numeric(temp[which(names(temp) == "100")]/sum(temp)))
})
#of everyone with strategy 101, who ends up playing 100?
strat_101_plays_100 <- sapply(1:length(target_obj), function(x){
temp <- sort(table(unlist(target_obj[[x]]$actual_outcome[which(target_obj[[x]]$advertisement == 1 & target_obj[[x]]$negotiation == 0 & target_obj[[x]]$matching == 1)])), decreasing = TRUE)
return(as.numeric(temp[which(names(temp) == "100")]/sum(temp)))
})
#of everyone with strategy 110, who ends up playing 100?
strat_110_plays_100 <- sapply(1:length(target_obj), function(x){
temp <- sort(table(unlist(target_obj[[x]]$actual_outcome[which(target_obj[[x]]$advertisement == 1 & target_obj[[x]]$negotiation == 1 & target_obj[[x]]$matching == 0)])), decreasing = TRUE)
return(as.numeric(temp[which(names(temp) == "100")]/sum(temp)))
})
#export cowplot
if(i == 1){png("model_plots/base_outcome.png", width = 6, height = 2.2, units = "in", res = 300)}
if(i == 2){png("model_plots/base_net_outcome.png", width = 6, height = 2.2, units = "in", res = 300)}
if(i == 3){png("model_plots/loss_outcome.png", width = 6, height = 2.2, units = "in", res = 300)}
if(i == 4){png("model_plots/loss_net_outcome.png", width = 6, height = 2.2, units = "in", res = 300)}
print({
plot_grid(ggplot(as.data.frame(strat_111_plays_100), aes(x = strat_111_plays_100)) + geom_histogram() +
xlim(0, 1) + xlab("") + ylab("Frequency") + ggtitle("Strategy = 111") +
theme_linedraw(base_size = 9),
ggplot(as.data.frame(strat_101_plays_100), aes(x = strat_101_plays_100)) + geom_histogram() +
xlim(0, 1) + xlab("Prop w/Outcome = 100") + ylab("") + ggtitle("Strategy = 101") +
theme_linedraw(base_size = 9),
ggplot(as.data.frame(strat_110_plays_100), aes(x = strat_110_plays_100)) + geom_histogram() +
xlim(0, 1) + xlab("") + ylab("") + ggtitle("Strategy = 110") +
theme_linedraw(base_size = 9), nrow = 1, labels = c("A", "B", "C"))
})
dev.off()
rm(list = c("strat_111_plays_100", "strat_101_plays_100", "strat_110_plays_100"))
}
load("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/output/base_attr.RData")
attractive$status_quo
plot(attractive$status_quo[[1]], ylim = c(0, 5), col = "white")
matlines(sapply(1:length(attractive$arbitrary), function(x){attractive$arbitrary[[x]]}))
plot(attractive$status_quo[[1]], ylim = c(0, 5), col = "white")
matlines(sapply(1:length(attractive$status_quo), function(x){attractive$status_quo[[x]]}))
plot(attractive$status_quo[[1]], ylim = c(0, 2), col = "white")
matlines(sapply(1:length(attractive$status_quo), function(x){attractive$status_quo[[x]]}))
plot(attractive$status_quo[[1]], ylim = c(0, 3), col = "white")
matlines(sapply(1:length(attractive$status_quo), function(x){attractive$status_quo[[x]]}))
plot(attractive$status_quo[[1]], ylim = c(0, 2), col = "white")
matlines(sapply(1:length(attractive$status_quo), function(x){attractive$status_quo[[x]]}))
matlines(sapply(1:length(attractive$arbitrary), function(x){attractive$arbitrary[[x]]}))
plot(attractive$status_quo[[1]], ylim = c(0, 2), col = "white")
matlines(sapply(1:length(attractive$arbitrary), function(x){attractive$arbitrary[[x]]}))
setwd("~/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 5, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, networked = TRUE)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 8, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, networked = TRUE)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 5, phi = 1, delta = 0, kappa = 0, lambda = 1, networked = TRUE)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 5, phi = 0.5, delta = 0, kappa = 0, lambda = 1, networked = TRUE)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 4, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 5, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 0, n_moves = 5, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 10, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 10, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.1, 0, 0, 0), neg_cost = 1, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
setwd("~/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 8, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, loss_averse = TRUE)
#test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 8, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, power_weighted = TRUE)
plot_model(test)
source("functions.R")
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, power_weighted = TRUE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, power_weighted = FALSE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 1, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, power_weighted = FALSE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 0, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, power_weighted = FALSE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 0, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, static_prefs = TRUE, power_weighted = FALSE)
plot_model(test)
source("functions.R")
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 0, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, static_prefs = TRUE, power_weighted = FALSE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(0.5, 0, 0, 0), neg_cost = 0, n_moves = 10, phi = 1, delta = 0, kappa = 0, lambda = 1, pref_payoff = TRUE, static_prefs = TRUE, power_weighted = FALSE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1, pref_payoff = TRUE, static_prefs = TRUE, power_weighted = FALSE)
plot_model(test)
test <- model(pop_size = 500, t = 50, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 10, phi = 1, delta = 1, kappa = 0, lambda = 1,
pref_payoff = TRUE, static_prefs = TRUE, power_weighted = FALSE, loss_averse = TRUE)
plot_model(test)
setwd("~/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
#store required packages
pkgs <- unique(getParseData(parse("functions.R"))$text[getParseData(parse("functions.R"))$token == "SYMBOL_PACKAGE"])
#set parameters
pop_size <- 500
t <- 100
reps <- 10
neg_costs <- seq(0, 10, 1)
n_moves <- seq(2, 12, 1)
#store params in data frame
params <- data.frame(neg_costs = rep(neg_costs, length(n_moves)),
n_moves = unlist(lapply(1:length(n_moves), function(x){rep(n_moves[x], length(neg_costs))})))
model(pop_size = pop_size, t = t, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup
sup[[20]]
sup[[10]]
sup[[10]]$actual_outcome
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[1]
sup[[1]]
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[1]]
sup[[2]]
sup[[3]]
sup[[10]]
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[10]]
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[10]]
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[10]]
sup
output <- sup
output[[10]]
output[[10]][4, ]
output[[10]][4, 2:4]
output[[10]][4, 2:3]
#model plotting function, strategies or moves (strats = TRUE/FALSE)
plot_model <- function(output, colors = NULL, strats = TRUE, xlim = NULL){
if(strats){
#get all possible combinations of strategies
poss_patterns <- expand.grid(rep(list(c(0, 1)), 2))
poss_patterns <- sapply(1:nrow(poss_patterns), function(x){paste0(poss_patterns[x, ], collapse = "")})
#store pop_size and t from output
t <- ifelse(is.null(xlim), length(output), xlim)
pop_size <- nrow(output[[1]])
#convert output to matrix
output_mat <- sapply(1:t, function(x){as.numeric(table(factor(sapply(1:pop_size, function(y){paste0(output[[x]][y, 2:3], collapse = "")}), levels = poss_patterns)))})
#generate colors for plotting
if(is.null(colors)){colors <- c("black", randomcoloR::distinctColorPalette(length(poss_patterns) - 1))}
#plot
par(mar = c(4, 4, 1, 1))
plot(1:t, output_mat[1,]/pop_size, ylim = c(0, 1), ylab = "Proportion", xlab = "Time", type = "l", col = colors[1], lwd = 2)
for(i in 2:nrow(output_mat)){lines(1:t, output_mat[i,]/pop_size, col = colors[i], lwd = 2)}
legend("topright", legend = poss_patterns, col = colors, pch = 19, ncol = 2)
} else{
#get number of moves
n_moves <- length(output[[1]]$a_moves[[1]])
#store pop_size and t from output
t <- ifelse(is.null(xlim), length(output), xlim)
pop_size <- nrow(output[[1]])
#convert output to matrix
output_mat <- sapply(1:t, function(x){as.numeric(table(factor(output[[x]]$pref, levels = 1:n_moves)))})
#generate colors for plotting
colors <- c("black", distinctColorPalette(n_moves - 1))
#plot
par(mar = c(4, 4, 1, 1))
plot(1:t, output_mat[1,]/pop_size, ylim = c(0, 1), ylab = "Proportion", xlab = "Time", type = "l", col = colors[1], lwd = 2)
for(i in 2:nrow(output_mat)){lines(1:t, output_mat[i,]/pop_size, col = colors[i], lwd = 2)}
legend("topright", legend = 1:n_moves, col = colors, pch = 19, ncol = 2)
}
}
plot_model(output)
plot_model(output)
plot_model(output)
plot_model(output)
plot_model(output)
setwd("~/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
#store required packages
pkgs <- unique(getParseData(parse("functions.R"))$text[getParseData(parse("functions.R"))$token == "SYMBOL_PACKAGE"])
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup
length("01")
length(c("01"))
length(c("W", "01"))
length(c(NA, "01"))
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup
sup[[1]]
sup[[2]]
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[2]]
sup[[10]]
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[10]]
sup[[10]]$neg_outcome
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
source("functions.R")
source("functions.R")
sup <- model(pop_size = 20, t = 10, priors = c(1, 0, 0, 0), neg_cost = 0, n_moves = 4, phi = 1, delta = 0, kappa = 0, lambda = 1)
sup[[10]]
