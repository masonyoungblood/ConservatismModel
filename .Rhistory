library(ggplot2)
library(dagitty)
library(ggdag)
library(survival)
library(ggfortify)
library(flexsurv)
#load data
raw_data <- read.csv("Window.Collision.R-Ready.res.csv")
#define categories of nodes
exposure <- c("FUND", "MASS", "AGE", "SZN")
outcome <- c("DEAD")
other <- c("STAT", "ORG", "SPEC", "FAM")
#create DAG
dag <- dagify(
FUND ~ ORG + STAT,
DEAD ~ ORG + FUND + SPEC + MASS + AGE + SZN,
AGE ~ SZN,
SPEC ~ SZN + FAM + STAT,
MASS ~ SPEC
)
#adjustment set required for direct effects of interest
adjustmentSets(dag, exposure = c("FUND", "MASS", "AGE", "SZN"), outcome = c("DEAD"))
#plot DAG
set.seed(1234)
dag_plot <- ggdag(dag) + theme_void()
colors <- as.character(ifelse(dag_plot$data$name %in% outcome, 1, ifelse(dag_plot$data$name %in% exposure, 2, 3)))
dag_plot$layers[[3]]$mapping <- aes(colour = colors)
dag_plot + scale_color_manual(values = c("red", "blue", "black")) + theme(legend.position = "none")
#subset data
data <- data.frame(treatment = raw_data$Treatment.Time,
mass = raw_data$Avg.Sp.Mass.g,
species = raw_data$Species,
family = raw_data$Family,
age = raw_data$Age,
sex = raw_data$Sex,
funding = raw_data$RhbFund,
org = raw_data$Facility,
state = sapply(1:nrow(raw_data), function(x){substr(raw_data$Location[x], nchar(raw_data$Location[x])-1, nchar(raw_data$Location[x]))}),
season = raw_data$Season,
death = ifelse(raw_data$Disposition %in% c("Dead on Arrival", "Died", "Euthanized"), 1, 0),
release = ifelse(raw_data$Disposition %in% c("Kept for Education", "Released"), 1, 0))
#add noise to treatment
data$treatment <- data$treatment + runif(nrow(data))
#replace uncertain species with NA and convert to factor
data$species[which(nchar(data$species) != 4)] <- NA
data$species <- factor(data$species)
#convert state, family, season, and organization to factor
data$state <- factor(data$state)
data$family <- factor(data$family)
data$org <- factor(data$org)
data$season <- factor(data$season)
#clean up age and sex and convert to factors
data$age[which(data$age == "Unknown")] <- NA
data$sex[which(data$sex == "Unknown")] <- NA
data$age <- factor(data$age)
data$sex <- factor(data$sex)
#scale mass and funding
data$mass <- as.numeric(scale(data$mass))
data$funding <- as.numeric(scale(data$funding))
#load imputed data
load("imp_data.RData")
#create one complete imputed dataset
imp_data_comp <- complete(imp_data)
#run three frequentist survival models: exponential, weibull, gamma
freq_exp <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "exponential")
freq_wei <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "weibull")
freq_gam <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "gamma")
#plot models
par(mar = c(4, 4, 0.5, 0.5))
plot(freq_gam, ci = FALSE, conf.int = FALSE, ylab = "Survival", xlab = "Treatment Days", xlim = c(0, 100), col = "#D55E00")
lines(freq_wei, col = "#0072B2", ci = FALSE)
lines(freq_exp, col = "#009E73", ci = FALSE)
legend("topright", lty = c(1, 1, 1), lwd = c(2, 2, 2), col = c("#009E73", "#0072B2", "#D55E00"), c("Exponential", "Weibull", "Gamma"))
#compare AIC for three models
AIC(freq_exp, freq_wei, freq_gam)
#run bayesian exponential model
exp_model <- brm_multiple(data = imp_data,
family = exponential,
treatment|cens(release) ~ mass + age + funding + season,
cores = 4, chains = 4, iter = 5000,
prior = c(set_prior("normal(0, 0.25)", class = "b"),
set_prior("normal(0, 2)", class = "Intercept")))
#run bayesian weibull model
wei_model <- brm_multiple(data = imp_data,
family = weibull,
treatment|cens(release) ~ mass + age + funding + season,
cores = 4, chains = 4, iter = 5000,
prior = c(set_prior("normal(0, 0.25)", class = "b"),
set_prior("normal(0, 2)", class = "Intercept")))
#run bayesian gamma model
gam_model <- brm_multiple(data = imp_data,
family = Gamma(link = "log"),
treatment|cens(release) ~ mass + age + funding + season,
cores = 4, chains = 4, iter = 5000,
prior = c(set_prior("normal(0, 0.25)", class = "b"),
set_prior("normal(0, 2)", class = "Intercept")))
#save models
save(exp_model, file = "exp_model.RData")
save(gam_model, file = "gam_model.RData")
save(wei_model, file = "wei_model.RData")
#load packages
library(brms)
library(mice)
library(ggplot2)
library(dagitty)
library(ggdag)
library(survival)
library(ggfortify)
library(flexsurv)
#load data
raw_data <- read.csv("Window.Collision.R-Ready.res.csv")
#define categories of nodes
exposure <- c("FUND", "MASS", "AGE", "SZN")
outcome <- c("DEAD")
other <- c("STAT", "ORG", "SPEC", "FAM")
#create DAG
dag <- dagify(
FUND ~ ORG + STAT,
DEAD ~ ORG + FUND + SPEC + MASS + AGE + SZN,
AGE ~ SZN,
SPEC ~ SZN + FAM + STAT,
MASS ~ SPEC
)
#adjustment set required for direct effects of interest
adjustmentSets(dag, exposure = c("FUND", "MASS", "AGE", "SZN"), outcome = c("DEAD"))
#plot DAG
set.seed(1234)
dag_plot <- ggdag(dag) + theme_void()
colors <- as.character(ifelse(dag_plot$data$name %in% outcome, 1, ifelse(dag_plot$data$name %in% exposure, 2, 3)))
dag_plot$layers[[3]]$mapping <- aes(colour = colors)
dag_plot + scale_color_manual(values = c("red", "blue", "black")) + theme(legend.position = "none")
#subset data
data <- data.frame(treatment = raw_data$Treatment.Time,
mass = raw_data$Avg.Sp.Mass.g,
species = raw_data$Species,
family = raw_data$Family,
age = raw_data$Age,
sex = raw_data$Sex,
funding = raw_data$RhbFund,
org = raw_data$Facility,
state = sapply(1:nrow(raw_data), function(x){substr(raw_data$Location[x], nchar(raw_data$Location[x])-1, nchar(raw_data$Location[x]))}),
season = raw_data$Season,
death = ifelse(raw_data$Disposition %in% c("Dead on Arrival", "Died", "Euthanized"), 1, 0),
release = ifelse(raw_data$Disposition %in% c("Kept for Education", "Released"), 1, 0))
#add noise to treatment
data$treatment <- data$treatment + runif(nrow(data))
#replace uncertain species with NA and convert to factor
data$species[which(nchar(data$species) != 4)] <- NA
data$species <- factor(data$species)
#convert state, family, season, and organization to factor
data$state <- factor(data$state)
data$family <- factor(data$family)
data$org <- factor(data$org)
data$season <- factor(data$season)
#clean up age and sex and convert to factors
data$age[which(data$age == "Unknown")] <- NA
data$sex[which(data$sex == "Unknown")] <- NA
data$age <- factor(data$age)
data$sex <- factor(data$sex)
#scale mass and funding
data$mass <- as.numeric(scale(data$mass))
data$funding <- as.numeric(scale(data$funding))
#load imputed data
load("imp_data.RData")
#create one complete imputed dataset
imp_data_comp <- complete(imp_data)
#run three frequentist survival models: exponential, weibull, gamma
freq_exp <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "exponential")
freq_wei <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "weibull")
freq_gam <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "gamma")
#plot models
par(mar = c(4, 4, 0.5, 0.5))
plot(freq_gam, ci = FALSE, conf.int = FALSE, ylab = "Survival", xlab = "Treatment Days", xlim = c(0, 100), col = "#D55E00")
lines(freq_wei, col = "#0072B2", ci = FALSE)
lines(freq_exp, col = "#009E73", ci = FALSE)
legend("topright", lty = c(1, 1, 1), lwd = c(2, 2, 2), col = c("#009E73", "#0072B2", "#D55E00"), c("Exponential", "Weibull", "Gamma"))
#compare AIC for three models
AIC(freq_exp, freq_wei, freq_gam)
#load models
load("exp_model.RData")
load("gam_model.RData")
load("wei_model.RData")
summary(wei_model)
#define function for plotting posteriors from the survival models
posterior_survival <- function(condition, input, times, bounds = TRUE){
if(bounds){
lower <- 1 - pexp(times, rate = 1/exp(input[1]))
median <- 1 - pexp(times, rate = 1/exp(input[2]))
upper <- 1 - pexp(times, rate = 1/exp(input[3]))
return(data.frame(condition, times, lower, median, upper))
} else{
temp <- lapply(1:length(input), function(x){data.frame(condition = condition, group = x, times = times, prob = 1 - pexp(times, rate = 1/exp(input[x])))})
return(do.call("rbind", temp))
}
}
#get all combinations of age and season
age_szn_combos <- expand.grid(c("Adult", "Juvenile"), c("Spring", "Summer", "Winter", "Fall"))
#compile mass data for plotting
mass_plot_data <- do.call(rbind, list(
posterior_survival("1", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = age_szn_combos[, 1], season = age_szn_combos[, 2], funding = 0, mass = -2), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("2", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = age_szn_combos[, 1], season = age_szn_combos[, 2], funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("3", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = age_szn_combos[, 1], season = age_szn_combos[, 2], funding = 0, mass = 2), re_formula = NA)), 1000), 0:40, FALSE)
))
#plot it
ggplot(data = mass_plot_data, aes(x = times, y = prob)) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
geom_line(aes(group = interaction(factor(group), factor(condition)), color = factor(condition)), alpha = 0.05) +
theme_linedraw() +
scale_color_manual(name = "Mass", labels = c("-2 SD", "0 SD", "+2 SD"), values = c("#D55E00", "#0072B2", "#009E73")) +
ylab("Proportion Alive") + xlab("Days of Treatment") +
guides(color = guide_legend(override.aes = list(alpha = 1)))
#compile age data for plotting
age_plot_data <- do.call(rbind, list(
posterior_survival("1", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = "Juvenile", season = c("Spring", "Summer", "Fall", "Winter"), funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("2", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = "Adult", season = c("Spring", "Summer", "Fall", "Winter"), funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE)
))
#plot it
ggplot(data = age_plot_data, aes(x = times, y = prob)) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
geom_line(aes(group = interaction(factor(group), factor(condition)), color = factor(condition)), alpha = 0.05) +
theme_linedraw() +
scale_color_manual(name = "Age", labels = c("Juvenile", "Adult"), values = c("#D55E00", "#0072B2")) +
ylab("Proportion Alive") + xlab("Days of Treatment") +
guides(color = guide_legend(override.aes = list(alpha = 1)))
#compile season data for plotting
szn_plot_data <- do.call(rbind, list(
posterior_survival("1", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = c("Juvenile", "Adult"), season = "Spring", funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("2", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = c("Juvenile", "Adult"), season = "Summer", funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("3", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = c("Juvenile", "Adult"), season = "Fall", funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("4", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = c("Juvenile", "Adult"), season = "Winter", funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE)
))
#plot it
ggplot(data = szn_plot_data, aes(x = times, y = prob)) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
geom_line(aes(group = interaction(factor(group), factor(condition)), color = factor(condition)), alpha = 0.05) +
theme_linedraw() +
scale_color_manual(name = "Season", labels = c("Spring", "Summer", "Fall", "Winter"), values = c("#D55E00", "#0072B2", "#009E73", "#CC79A7")) +
ylab("Proportion Alive") + xlab("Days of Treatment") +
guides(color = guide_legend(override.aes = list(alpha = 1)))
#get all combinations of age and season
age_szn_combos <- expand.grid(c("Adult", "Juvenile"), c("Spring", "Summer", "Winter", "Fall"))
#compile funding data for plotting
funding_plot_data <- do.call(rbind, list(
posterior_survival("1", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = age_szn_combos[, 1], season = age_szn_combos[, 2], funding = -2, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("2", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = age_szn_combos[, 1], season = age_szn_combos[, 2], funding = 0, mass = 0), re_formula = NA)), 1000), 0:40, FALSE),
posterior_survival("3", sample(c(posterior_linpred(wei_model, newdata = data.frame(age = age_szn_combos[, 1], season = age_szn_combos[, 2], funding = 2, mass = 0), re_formula = NA)), 1000), 0:40, FALSE)
))
#plot it
ggplot(data = funding_plot_data, aes(x = times, y = prob)) +
geom_hline(yintercept = 0.5, linetype = "dashed") +
geom_line(aes(group = interaction(factor(group), factor(condition)), color = factor(condition)), alpha = 0.05) +
theme_linedraw() +
scale_color_manual(name = "Funding", labels = c("-2 SD", "0 SD", "+2 SD"), values = c("#D55E00", "#0072B2", "#009E73")) +
ylab("Proportion Alive") + xlab("Days of Treatment") +
guides(color = guide_legend(override.aes = list(alpha = 1)))
log(-1)
log(-0.2)
exp(-0.2)
exp(-20)
1/exp(-20)
1/exp(0)
1/exp(1)
1/exp(-10)
exp(1/exp(-10))
exp(1/exp(-2))
exp(1/exp(-3))
exp(1/exp(-4))
exp(1/exp(1))
exp(1/exp(2))
exp(1/exp(5))
exp(1/exp(6))
#load packages
library(brms)
library(mice)
library(ggplot2)
library(dagitty)
library(ggdag)
library(survival)
library(ggfortify)
library(flexsurv)
#load data
raw_data <- read.csv("Window.Collision.R-Ready.res.csv")
#define categories of nodes
exposure <- c("FUND", "MASS", "AGE", "SZN")
outcome <- c("DEAD")
other <- c("STAT", "ORG", "SPEC", "FAM")
#create DAG
dag <- dagify(
FUND ~ ORG + STAT,
DEAD ~ ORG + FUND + SPEC + MASS + AGE + SZN,
AGE ~ SZN,
SPEC ~ SZN + FAM + STAT,
MASS ~ SPEC
)
#adjustment set required for direct effects of interest
adjustmentSets(dag, exposure = c("FUND", "MASS", "AGE", "SZN"), outcome = c("DEAD"))
#plot DAG
set.seed(1234)
dag_plot <- ggdag(dag) + theme_void()
colors <- as.character(ifelse(dag_plot$data$name %in% outcome, 1, ifelse(dag_plot$data$name %in% exposure, 2, 3)))
dag_plot$layers[[3]]$mapping <- aes(colour = colors)
dag_plot + scale_color_manual(values = c("red", "blue", "black")) + theme(legend.position = "none")
#subset data
data <- data.frame(treatment = raw_data$Treatment.Time,
mass = raw_data$Avg.Sp.Mass.g,
species = raw_data$Species,
family = raw_data$Family,
age = raw_data$Age,
sex = raw_data$Sex,
funding = raw_data$RhbFund,
org = raw_data$Facility,
state = sapply(1:nrow(raw_data), function(x){substr(raw_data$Location[x], nchar(raw_data$Location[x])-1, nchar(raw_data$Location[x]))}),
season = raw_data$Season,
death = ifelse(raw_data$Disposition %in% c("Dead on Arrival", "Died", "Euthanized"), 1, 0),
release = ifelse(raw_data$Disposition %in% c("Kept for Education", "Released"), 1, 0))
#add noise to treatment
data$treatment <- data$treatment + runif(nrow(data))
#replace uncertain species with NA and convert to factor
data$species[which(nchar(data$species) != 4)] <- NA
data$species <- factor(data$species)
#convert state, family, season, and organization to factor
data$state <- factor(data$state)
data$family <- factor(data$family)
data$org <- factor(data$org)
data$season <- factor(data$season)
#clean up age and sex and convert to factors
data$age[which(data$age == "Unknown")] <- NA
data$sex[which(data$sex == "Unknown")] <- NA
data$age <- factor(data$age)
data$sex <- factor(data$sex)
#scale mass and funding
data$mass <- as.numeric(scale(data$mass))
data$funding <- as.numeric(scale(data$funding))
#load imputed data
load("imp_data.RData")
#create one complete imputed dataset
imp_data_comp <- complete(imp_data)
#run three frequentist survival models: exponential, weibull, gamma
freq_exp <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "exponential")
freq_wei <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "weibull")
freq_gam <- flexsurvreg(Surv(treatment, release) ~ mass + age + funding + season, data = imp_data_comp, dist = "gamma")
#plot models
par(mar = c(4, 4, 0.5, 0.5))
plot(freq_gam, ci = FALSE, conf.int = FALSE, ylab = "Survival", xlab = "Treatment Days", xlim = c(0, 100), col = "#D55E00")
lines(freq_wei, col = "#0072B2", ci = FALSE)
lines(freq_exp, col = "#009E73", ci = FALSE)
legend("topright", lty = c(1, 1, 1), lwd = c(2, 2, 2), col = c("#009E73", "#0072B2", "#D55E00"), c("Exponential", "Weibull", "Gamma"))
#compare AIC for three models
AIC(freq_exp, freq_wei, freq_gam)
#run bayesian exponential model
exp_model <- brm_multiple(data = complete(imp_data),
family = exponential,
treatment|cens(release) ~ 0 + mass + age + funding + season,
cores = 4, chains = 4, iter = 5000,
prior = c(set_prior("normal(0, 0.25)", class = "b"),
set_prior("normal(0, 2)", class = "Intercept")))
#run bayesian exponential model
exp_model <- brm(data = complete(imp_data),
family = exponential,
treatment|cens(release) ~ 0 + mass + age + funding + season,
cores = 4, chains = 4, iter = 5000,
prior = c(set_prior("normal(0, 0.25)", class = "b"),
set_prior("normal(0, 2)", class = "Intercept")))
#run bayesian exponential model
exp_model <- brm(data = complete(imp_data),
family = exponential,
treatment|cens(release) ~ 0 + mass + age + funding + season,
cores = 4, chains = 4, iter = 5000,
prior = c(set_prior("normal(0, 0.25)", class = "b")))
summary(exp_model)
#run bayesian exponential model
exp_model <- brm(data = complete(imp_data),
family = exponential,
treatment|cens(release) ~ mass + age + funding + season,
cores = 4, chains = 4, iter = 2000,
prior = c(set_prior("normal(0, 0.25)", class = "b")))
summary(exp_model)
?brm_multiple
#load models
load("exp_model.RData")
load("gam_model.RData")
load("wei_model.RData")
exp_model$fit
exp_model$fit$b_Intercept
exp_model$fit$b_mass
exp_model$rhats
exp_model$rhats
exp_model$criteria
exp_model$rhats
rowMeans(exp_model$rhats)
rowMeans(exp_model$rhats)
rowMeans(exp_model$rhats)
?mclapply
?dist
install.packages("Rfast")
Rfast::dista(c(1, 2, 3, 4, 5), c(2, 2, 3, 4, 5))
Rfast::dista(c(1, 2, 3, 4, 5), c(2, 2, 3, 4, 5))
dist(c(1, 2, 3, 4, 5), c(2, 2, 3, 4, 5))
length(results)
split(100, ceiling(seq_along(1:100)/(100/4)))
split(1:100, ceiling(seq_along(1:100)/(100/4)))
results <- 1:10
#split up into allocations to preserve memory
allocations <- split(1:length(results), ceiling(seq_along(1:length(results))/(length(results)/4)))
allocations
#split up into allocations to preserve memory
n_split <- 4
allocations <- split(1:length(results), ceiling(seq_along(1:length(results))/(length(results)/n_split)))
allocations
results <- 1:100
allocations <- split(1:length(results), ceiling(seq_along(1:length(results))/(length(results)/n_split)))
allocations[1]
allocations[[1]]
obs_stats <- sample(1:100, 50)
obs_stats
sum_stats <- sample(1:100, 50)
rbind(obs_stats, sum_stats)
dist(rbind(obs_stats, sum_stats))
dist(rbind(obs_stats, sum_stats))
dist(rbind(obs_stats, sum_stats))
c(dist(rbind(obs_stats, sum_stats)))
c(dist(rbind(obs_stats, sum_stats)))
c(dist(rbind(obs_stats, sum_stats)))
c(dist(rbind(obs_stats, sum_stats)))
allocations[[1]]
?assign
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 5000
t <- 50
p <- 0
cost <- 0.5
moves <- 4
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves, gamma = 0.1, f = 1)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
n <- 5000
t <- 50
p <- 0
cost <- 0.5
moves <- 4
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves, gamma = 0.2, f = 1)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
n <- 5000
t <- 50
p <- 0
cost <- 0.5
moves <- 4
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves, gamma = 0.5, f = 1)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
testing[[t]]$advertisement
plot(sapply(1:t, function(x){testing[[x]]$advertisement}))
plot(sapply(1:t, function(x){sum(testing[[x]]$advertisement)/n}))
plot(sapply(1:t, function(x){sum(testing[[x]]$negotiation)/n}))
plot(sapply(1:t, function(x){sum(testing[[x]]$advertisement)/n}))
n <- 5000
t <- 50
p <- 0
cost <- 0.5
moves <- 4
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves, gamma = 0.25, f = 1)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
n <- 5000
t <- 50
p <- 0
cost <- 0.5
moves <- 8
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves, gamma = 0.5, f = 1)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
plot_model(testing)
source("functions.R")
plot_model(testing)
source("functions.R")
n <- 5000
t <- 100
p <- 0
cost <- 0.5
moves <- 8
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves, gamma = 0.5, f = 1)
setwd("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel")
source("functions.R")
n <- 5000
t <- 100
p <- 0
cost <- 0.5
moves <- 8
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
plot_model(testing)
n <- 5000
t <- 100
p <- 0
cost <- 0.2
moves <- 8
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
plot_model(testing)
n <- 5000
t <- 100
p <- 0
cost <- 0.2
moves <- 3
testing <- model(pop_size = n, t = t, prior = c(p, 0, 0), neg_cost = cost, n_moves = moves)
sup <- do.call(rbind, lapply(1:t, function(x){as.numeric(table(factor(testing[[x]]$status_quo, levels = 1:moves)))}))
matplot(as.matrix(sup), ylim = c(0, n), type = "l")
plot_model(testing)
